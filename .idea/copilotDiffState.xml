<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SYUcap/src/main/java/com/SYUcap/SYUcap/Board/Board.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SYUcap/src/main/java/com/SYUcap/SYUcap/Board/Board.java" />
              <option name="originalContent" value="package com.SYUcap.SYUcap.Board;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@ToString&#10;@Getter&#10;@Setter&#10;public class Board {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;                    // 게시글 ID&#10;&#10;    private String category;            // 게임/스터디/영화/운동/밥약&#10;    private String title;               // 제목&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String content;             // 내용&#10;&#10;    private String location;            // 장소&#10;    private LocalDateTime meetingStartTime; // 시작시간&#10;    private LocalDateTime meetingEndTime;   // 종료시간&#10;&#10;    private Integer limitCount;         // 제한 인원&#10;    private String authorName;          // 작성자 이름&#10;    private LocalDateTime createdAt;    // 작성일&#10;}&#10;" />
              <option name="updatedContent" value="package com.SYUcap.SYUcap.Board;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import lombok.ToString;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@ToString&#10;@Getter&#10;@Setter&#10;public class Board {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;                    // 게시글 ID&#10;&#10;    private String category;            // 게임/스터디/영화/운동/밥약&#10;    private String title;               // 제목&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String content;             // 내용&#10;&#10;    private String location;            // 장소&#10;    private LocalDateTime meetingStartTime; // 시작시간&#10;    private LocalDateTime meetingEndTime;   // 종료시간&#10;&#10;    private Integer limitCount;         // 제한 인원&#10;    private String authorName;          // 작성자 이름&#10;    private LocalDateTime createdAt;    // 작성일&#10;&#10;    @PrePersist&#10;    protected void onCreate() {&#10;        this.createdAt = LocalDateTime.now();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SYUcap/src/main/resources/static/mypage.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SYUcap/src/main/resources/static/mypage.css" />
              <option name="updatedContent" value="/* 마이페이지 전용 스타일 */&#10;* {&#10;    margin: 0;&#10;    padding: 0;&#10;    box-sizing: border-box;&#10;}&#10;&#10;body {&#10;    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;&#10;    background: #f5f5f5;&#10;    min-height: 100vh;&#10;    padding: 20px;&#10;}&#10;&#10;.card {&#10;    max-width: 400px;&#10;    margin: 0 auto;&#10;    background: white;&#10;    border-radius: 12px;&#10;    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);&#10;    padding: 24px;&#10;    position: relative;&#10;}&#10;&#10;h1 {&#10;    font-size: 24px;&#10;    font-weight: 600;&#10;    color: #333;&#10;    text-align: center;&#10;    margin-bottom: 24px;&#10;}&#10;&#10;/* 탭 스타일 */&#10;.tabs {&#10;    display: flex;&#10;    border-bottom: 1px solid #e9ecef;&#10;    margin-bottom: 24px;&#10;}&#10;&#10;.tabs a {&#10;    flex: 1;&#10;    padding: 12px 16px;&#10;    text-decoration: none;&#10;    color: #6c757d;&#10;    text-align: center;&#10;    border-bottom: 2px solid transparent;&#10;    transition: all 0.2s;&#10;}&#10;&#10;.tabs a.active {&#10;    color: #007bff;&#10;    border-bottom-color: #007bff;&#10;    font-weight: 500;&#10;}&#10;&#10;.tabs a:hover {&#10;    color: #007bff;&#10;    background: #f8f9fa;&#10;}&#10;&#10;/* 아바타 스타일 */&#10;.avatar-wrap {&#10;    display: flex;&#10;    justify-content: center;&#10;    margin-bottom: 32px;&#10;    position: relative;&#10;}&#10;&#10;.avatar {&#10;    width: 80px;&#10;    height: 80px;&#10;    border-radius: 50%;&#10;    background: #e9ecef;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;&#10;.avatar.placeholder {&#10;    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;}&#10;&#10;.avatar svg {&#10;    fill: white;&#10;}&#10;&#10;.edit-badge {&#10;    position: absolute;&#10;    bottom: 4px;&#10;    right: calc(50% - 48px);&#10;    width: 28px;&#10;    height: 28px;&#10;    background: white;&#10;    border-radius: 50%;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);&#10;    cursor: pointer;&#10;    transition: transform 0.2s;&#10;}&#10;&#10;.edit-badge:hover {&#10;    transform: scale(1.1);&#10;}&#10;&#10;/* 폼 요소들 */&#10;.row {&#10;    display: flex;&#10;    align-items: center;&#10;    margin-bottom: 16px;&#10;    gap: 12px;&#10;}&#10;&#10;.label {&#10;    width: 80px;&#10;    font-weight: 500;&#10;    color: #495057;&#10;    font-size: 14px;&#10;}&#10;&#10;.input {&#10;    flex: 1;&#10;    padding: 10px 12px;&#10;    border: 1px solid #dee2e6;&#10;    border-radius: 6px;&#10;    font-size: 14px;&#10;    background: #f8f9fa;&#10;    color: #6c757d;&#10;}&#10;&#10;.input:focus {&#10;    outline: none;&#10;    border-color: #007bff;&#10;    background: white;&#10;    color: #333;&#10;}&#10;&#10;.btn {&#10;    padding: 8px 16px;&#10;    border: 1px solid #007bff;&#10;    border-radius: 6px;&#10;    background: white;&#10;    color: #007bff;&#10;    font-size: 12px;&#10;    font-weight: 500;&#10;    cursor: pointer;&#10;    transition: all 0.2s;&#10;    white-space: nowrap;&#10;}&#10;&#10;.btn:hover {&#10;    background: #007bff;&#10;    color: white;&#10;}&#10;&#10;.btn-primary {&#10;    background: #007bff;&#10;    color: white;&#10;}&#10;&#10;.btn-primary:hover {&#10;    background: #0056b3;&#10;}&#10;&#10;.btn-danger {&#10;    border-color: #dc3545;&#10;    color: #dc3545;&#10;}&#10;&#10;.btn-danger:hover {&#10;    background: #dc3545;&#10;    color: white;&#10;}&#10;&#10;/* 로그아웃 버튼 */&#10;.logout {&#10;    width: 100%;&#10;    padding: 12px;&#10;    border: none;&#10;    border-radius: 8px;&#10;    background: #dc3545;&#10;    color: white;&#10;    font-weight: 500;&#10;    cursor: pointer;&#10;    margin-top: 24px;&#10;    transition: background 0.2s;&#10;}&#10;&#10;.logout:hover {&#10;    background: #c82333;&#10;}&#10;&#10;/* 네비게이션 바 */&#10;.bottom-nav {&#10;    position: fixed;&#10;    bottom: 0;&#10;    left: 0;&#10;    right: 0;&#10;    background: white;&#10;    border-top: 1px solid #dee2e6;&#10;    display: flex;&#10;    padding: 12px 0;&#10;}&#10;&#10;.nav-item {&#10;    flex: 1;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    text-decoration: none;&#10;    color: #6c757d;&#10;    font-size: 12px;&#10;    gap: 4px;&#10;}&#10;&#10;.nav-item.active {&#10;    color: #007bff;&#10;}&#10;&#10;.nav-item svg {&#10;    width: 24px;&#10;    height: 24px;&#10;}&#10;&#10;/* 설정 페이지 전용 스타일 */&#10;.settings-section {&#10;    margin-bottom: 24px;&#10;}&#10;&#10;.settings-section h3 {&#10;    font-size: 16px;&#10;    font-weight: 600;&#10;    color: #333;&#10;    margin-bottom: 16px;&#10;    padding-bottom: 8px;&#10;    border-bottom: 1px solid #e9ecef;&#10;}&#10;&#10;.setting-item {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;    padding: 12px 0;&#10;    border-bottom: 1px solid #f8f9fa;&#10;}&#10;&#10;.setting-item:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.setting-label {&#10;    font-size: 14px;&#10;    color: #333;&#10;}&#10;&#10;.setting-description {&#10;    font-size: 12px;&#10;    color: #6c757d;&#10;    margin-top: 2px;&#10;}&#10;&#10;.toggle {&#10;    position: relative;&#10;    width: 44px;&#10;    height: 24px;&#10;    background: #dee2e6;&#10;    border-radius: 12px;&#10;    cursor: pointer;&#10;    transition: background 0.2s;&#10;}&#10;&#10;.toggle.active {&#10;    background: #007bff;&#10;}&#10;&#10;.toggle::after {&#10;    content: '';&#10;    position: absolute;&#10;    top: 2px;&#10;    left: 2px;&#10;    width: 20px;&#10;    height: 20px;&#10;    background: white;&#10;    border-radius: 50%;&#10;    transition: transform 0.2s;&#10;}&#10;&#10;.toggle.active::after {&#10;    transform: translateX(20px);&#10;}&#10;&#10;/* 반응형 디자인 */&#10;@media (max-width: 480px) {&#10;    body {&#10;        padding: 12px;&#10;    }&#10;    &#10;    .card {&#10;        padding: 20px;&#10;    }&#10;    &#10;    .row {&#10;        flex-direction: column;&#10;        align-items: stretch;&#10;        gap: 8px;&#10;    }&#10;    &#10;    .label {&#10;        width: 100%;&#10;    }&#10;    &#10;    .btn {&#10;        align-self: flex-end;&#10;        margin-top: 4px;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SYUcap/src/main/resources/templates/recent-posts.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SYUcap/src/main/resources/templates/recent-posts.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/SYUcap/src/test/java/com/SYUcap/SYUcap/User/UserControllerTests.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SYUcap/src/test/java/com/SYUcap/SYUcap/User/UserControllerTests.java" />
              <option name="originalContent" value="package com.SYUcap.SYUcap.User;&#10;&#10;import jakarta.annotation.TestConfiguration;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.Mock;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Import;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.ResultActions;&#10;&#10;import static org.mockito.Mockito.mock;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@Import(UserController.class)&#10;@WebMvcTest&#10;class UserControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private UserService userService;&#10;&#10;    @Mock&#10;    private UserRepository userRepository;&#10;&#10;&#10;    @Test&#10;    @DisplayName(&quot;GET /signup 요청 시 signup.html 뷰를 반환한다&quot;)&#10;    void signup_GET_요청() throws Exception {&#10;        // Arrange (준비)&#10;        // 이 테스트는 특별한 준비 단계가 필요 없음&#10;&#10;        // Act (실행)&#10;        ResultActions resultActions = mockMvc.perform(get(&quot;/signup&quot;));&#10;&#10;        // Assert (검증)&#10;        resultActions&#10;                .andExpect(status().isOk())&#10;                .andExpect(view().name(&quot;signup.html&quot;));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;GET /login 요청 시 (에러 없을 때) login 뷰를 반환한다&quot;)&#10;    void login_GET_요청_에러없음() throws Exception {&#10;        // Arrange (준비)&#10;        // 특별한 준비 단계 없음&#10;&#10;        // Act (실행)&#10;        ResultActions resultActions = mockMvc.perform(get(&quot;/login&quot;));&#10;&#10;        // Assert (검증)&#10;        resultActions&#10;                .andExpect(status().isOk())&#10;                .andExpect(view().name(&quot;login&quot;))&#10;                .andExpect(model().attributeDoesNotExist(&quot;error&quot;));&#10;    }&#10;&#10;    @TestConfiguration&#10;    static class MockConfig {&#10;        @Bean&#10;        public UserService userService() {&#10;            return mock(UserService.class);&#10;        }&#10;        @Bean&#10;        public UserRepository userRepository() {&#10;            return mock(UserRepository.class);&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.SYUcap.SYUcap.User;&#10;&#10;import org.springframework.boot.test.context.TestConfiguration;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.Mock;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Import;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.ResultActions;&#10;&#10;import static org.mockito.Mockito.mock;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;@Import(UserController.class)&#10;@WebMvcTest&#10;class UserControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @Mock&#10;    private UserService userService;&#10;&#10;    @Mock&#10;    private UserRepository userRepository;&#10;&#10;&#10;    @Test&#10;    @DisplayName(&quot;GET /signup 요청 시 signup.html 뷰를 반환한다&quot;)&#10;    void signup_GET_요청() throws Exception {&#10;        // Arrange (준비)&#10;        // 이 테스트는 특별한 준비 단계가 필요 없음&#10;&#10;        // Act (실행)&#10;        ResultActions resultActions = mockMvc.perform(get(&quot;/signup&quot;));&#10;&#10;        // Assert (검증)&#10;        resultActions&#10;                .andExpect(status().isOk())&#10;                .andExpect(view().name(&quot;signup.html&quot;));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;GET /login 요청 시 (에러 없을 때) login 뷰를 반환한다&quot;)&#10;    void login_GET_요청_에러없음() throws Exception {&#10;        // Arrange (준비)&#10;        // 특별한 준비 단계 없음&#10;&#10;        // Act (실행)&#10;        ResultActions resultActions = mockMvc.perform(get(&quot;/login&quot;));&#10;&#10;        // Assert (검증)&#10;        resultActions&#10;                .andExpect(status().isOk())&#10;                .andExpect(view().name(&quot;login&quot;))&#10;                .andExpect(model().attributeDoesNotExist(&quot;error&quot;));&#10;    }&#10;&#10;    @TestConfiguration&#10;    static class MockConfig {&#10;        @Bean&#10;        public UserService userService() {&#10;            return mock(UserService.class);&#10;        }&#10;        @Bean&#10;        public UserRepository userRepository() {&#10;            return mock(UserRepository.class);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>